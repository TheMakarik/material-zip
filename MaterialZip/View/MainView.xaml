<Window
    AllowsTransparency="True"
    Height="450"
    Icon="/Assets/Icon.png"
    Name="MainWindow"
    ResizeMode="CanResizeWithGrip"
    Style="{DynamicResource MaterialDesignWindow}"
    Title="{Binding Localization.AppName}"
    Width="800"
    WindowStartupLocation="CenterOwner"
    WindowStyle="None"
    d:DataContext="{d:DesignInstance Type=viewModel:MainViewModel}"
    mc:Ignorable="d"
    x:Class="MaterialZip.View.MainView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:controls="clr-namespace:MaterialZip.View.Controls"
    xmlns:convertors="clr-namespace:MaterialZip.Convertors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:entities="clr-namespace:MaterialZip.Model.Entities"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewModel="clr-namespace:MaterialZip.ViewModel"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <controls:FastGrid RowDefinitions="Auto, Auto, Auto, *,  Auto">
        <!--  Title bar  -->
        <controls:FastGrid ColumnDefinitions="Auto, *" Grid.Row="0">

            <controls:FastGrid.Resources>
                <Style TargetType="{x:Type StackPanel}">
                    <Setter Property="Orientation" Value="Horizontal" />
                    <Setter Property="VerticalAlignment" Value="Top" />
                </Style>
                <Style TargetType="{x:Type materialDesign:PackIcon}">
                    <Setter Property="Width" Value="{Binding Width, RelativeSource={RelativeSource AncestorType=Button}}" />
                </Style>
            </controls:FastGrid.Resources>

            <!--  Icon and Title  -->
            <StackPanel
                Grid.Column="0"
                HorizontalAlignment="Left"
                VerticalAlignment="Top">
                <Image
                    Margin="10,4,0,0"
                    Source="{Binding Icon, RelativeSource={RelativeSource AncestorType=Window}}"
                    Width="20"
                    d:DesignSource="/Assets/Icon.png" />
                <Label
                    Content="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}"
                    Margin="0,4,0,0"
                    d:Content="Material Zip (Design)" />
            </StackPanel>

            <!--  Buttons  -->
            <StackPanel Grid.Column="1" HorizontalAlignment="Right">
                <!--
                    I don't know why I don't have PrimaryHueDarkBrush in the resources,
                    so I will be trying to get background color from this button by name
                -->
                <Button Click="Minimize" x:Name="CloseButton">
                    <materialDesign:PackIcon Kind="Minimize" />
                </Button>
                <Button Click="Maximize">
                    <materialDesign:PackIcon Kind="Maximize" />
                </Button>
                <Button Click="Close">
                    <materialDesign:PackIcon Kind="Close" />
                </Button>
            </StackPanel>
        </controls:FastGrid>


        <!--  Menu  -->
        <Menu Grid.Row="1" materialDesign:MenuAssist.MenuItemsPresenterMargin="0">

            <MenuItem Header="{Binding Localization.Edit}">
                <MenuItem Header="{Binding Localization.Create}" Icon="{materialDesign:PackIcon Kind=Create}">
                    <MenuItem Header="{Binding Localization.File}" Icon="{materialDesign:PackIcon Kind=File}" />
                    <MenuItem Header="{Binding Localization.Directory}" Icon="{materialDesign:PackIcon Kind=Folder}" />
                    <MenuItem Header="{Binding Localization.Archive}" />
                </MenuItem>
                <MenuItem Header="{Binding Localization.Copy}" Icon="{materialDesign:PackIcon Kind=ContentCopy}" />
                <MenuItem Header="{Binding Localization.Paste}" Icon="{materialDesign:PackIcon Kind=ContentPaste}" />
                <MenuItem Header="{Binding Localization.Cut}" Icon="{materialDesign:PackIcon Kind=ContentCut}" />
                <MenuItem Header="{Binding Localization.Delete}" Icon="{materialDesign:PackIcon Kind=Delete}" />
                <MenuItem Header="{Binding Localization.Select}" Icon="{materialDesign:PackIcon Kind=Select}">
                    <MenuItem Header="{Binding Localization.AllFiles}" Icon="{materialDesign:PackIcon Kind=Files}" />
                    <MenuItem Header="{Binding Localization.AllDirectories}" Icon="{materialDesign:PackIcon Kind=Folders}" />
                    <MenuItem Header="{Binding Localization.ByRegex}" Icon="{materialDesign:PackIcon Kind=Regex}" />
                </MenuItem>

            </MenuItem>

            <MenuItem Header="{Binding Localization.View}">
                <MenuItem Header="{Binding Localization.Settings}" />
                <MenuItem Header="{Binding Localization.ListView}" />
                <MenuItem Header="{Binding Localization.TableView}" />
            </MenuItem>
            <MenuItem Header="{Binding Localization.Services}">
                <MenuItem Header="{Binding Localization.OpenGitHub}" Icon="{materialDesign:PackIcon Kind=Github}" />
                <MenuItem Header="{Binding Localization.ShowHistory}" Icon="{materialDesign:PackIcon Kind=ClipboardTextHistory}" />
            </MenuItem>

            <MenuItem
                Command="{Binding UndoCommand}"
                Foreground="{Binding CanUndo, Converter={x:Static convertors:BooleanToBrushConvertor.Instance}, ConverterParameter={StaticResource ButtonIconColor}}"
                Header="{materialDesign:PackIcon Kind=ArrowLeft}"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch" />
            <MenuItem
                Command="{Binding RedoCommand}"
                Foreground="{Binding CanRedo, Converter={x:Static convertors:BooleanToBrushConvertor.Instance}, ConverterParameter={StaticResource ButtonIconColor}}"
                Header="{materialDesign:PackIcon Kind=ArrowRight}"
                HorizontalContentAlignment="Stretch"
                VerticalContentAlignment="Stretch" />
        </Menu>


        <!--  Path viewer  -->
        <controls:FastGrid
            ColumnDefinitions="Auto, *"
            Grid.Row="2"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Center">

            <materialDesign:PackIcon
                Foreground="{Binding BorderBrush, ElementName=PathTextBox}"
                Grid.Column="0"
                Kind="Search"
                Margin="3,0,4,0"
                VerticalAlignment="Center"
                Width="30" />

            <TextBox
                Grid.Column="1"
                HorizontalAlignment="Stretch"
                HorizontalContentAlignment="Left"
                KeyDown="PathTextBox_OnKeyDown"
                Margin="0,0,2,4"
                Style="{DynamicResource MaterialDesignOutlinedTextBox}"
                Text="{Binding CurrentPath}"
                VerticalContentAlignment="Center"
                materialDesign:HintAssist.Hint="Path"
                x:Name="PathTextBox" />

        </controls:FastGrid>

        <!--  DataGrid  -->
        <DataGrid
            AutoGenerateColumns="False"
            Grid.Row="3"
            HorizontalScrollBarVisibility="Auto"
            IsReadOnly="True"
            ItemsSource="{Binding Entities, Converter={x:Static convertors:FileEntityEnumerableToFileDataGridEntityEnumerableConvertor.Instance}}"
            VerticalScrollBarVisibility="Auto">


            <DataGrid.Resources>
                <Style BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="{Binding ElementName=CloseButton, Path=Background}" />
                </Style>

                <Style BasedOn="{StaticResource MaterialDesignDataGridCell}" TargetType="DataGridCell">
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="BorderBrush" Value="Transparent" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.Resources>

            <DataGrid.Columns>

                <DataGridTemplateColumn Width="130">
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <Label Content="{Binding DataContext.Localization.Name, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <Image
                                    Height="{Binding FontSize, ElementName=FileNameLabel}"
                                    Source="{Binding Path, Converter={x:Static convertors:PathToImageSourceConvertor.Instance}}"
                                    Width="{Binding FontSize, ElementName=FileNameLabel}" />
                                <Label Content="{Binding Name}" Name="FileNameLabel" />
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <Label Content="{Binding DataContext.Localization.Size, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding Size}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <Label Content="{Binding DataContext.Localization.DateOfChanging, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding LastChanging}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>


                <DataGridTemplateColumn>
                    <DataGridTemplateColumn.HeaderTemplate>
                        <DataTemplate>
                            <Label Content="{Binding DataContext.Localization.DateOfCreating, RelativeSource={RelativeSource AncestorType=DataGrid}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.HeaderTemplate>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Label Content="{Binding CreatedAt}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

            </DataGrid.Columns>

            <!--
                Here is the reason why I deleted ViewModelLocator, I need to put somehow command here,
                but I cant, and due to ViewModelLocator I cant go to Code Behind
                You can help: https://stackoverflow.com/questions/79710670/use-mousedoubleclick-event-trigger-in-every-datagrid-row?noredirect=1#comment140610313_79710670
            -->
            <DataGrid.RowStyle>
                <Style BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="DataGridRow">
                    <EventSetter Event="MouseDoubleClick" Handler="InvokeResetDirectoryContent" />
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu PlacementTarget="{Binding ElementName=MainWindow}" materialDesign:MenuAssist.MenuItemsPresenterMargin="0">
                                <ContextMenu.Resources>
                                    <Style BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="MenuItem">
                                        <Setter Property="DataContext" Value="{Binding PlacementTarget, Converter={x:Static convertors:PlacementTargetToDataContextConvertor.Instance}, RelativeSource={RelativeSource AncestorType=ContextMenu}}" />
                                    </Style>
                                </ContextMenu.Resources>
                                <!--  Jetbrains Rider does not see d:DataContext from Style Setter  -->
                                <MenuItem
                                    Command="{Binding ShowInWindowsExplorerCommand}"
                                    CommandParameter="{Binding DataContext, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static convertors:FileDataGridEntityToFileEntityConvertor.Instance}}"
                                    Header="{Binding Localization.ShowInWindowsExplorer}"
                                    Icon="{materialDesign:PackIcon Kind=MicrosoftWindows}"
                                    d:DataContext="{d:DesignInstance Type=viewModel:MainViewModel}" />
                                <MenuItem
                                    Header="{Binding Localization.Rename}"
                                    Icon="{materialDesign:PackIcon Kind=Rename}"
                                    Visibility="{Binding DataContext.Path, RelativeSource={RelativeSource AncestorType=ContextMenu}, Converter={x:Static convertors:PathToVisibilityCollapsingLogicalDrivesConvertor.Instance}}"
                                    d:DataContext="{d:DesignInstance Type=viewModel:MainViewModel}" />
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DataGrid.RowStyle>

        </DataGrid>

        <!--  Footer  -->
        <controls:FastGrid
            Background="{Binding Background, ElementName=CloseButton}"
            ColumnDefinitions="Auto, Auto"
            Grid.Row="4">

            <controls:FastGrid.Resources>
                <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="Button">
                    <Setter Property="Background" Value="Transparent" />
                    <Setter Property="BorderBrush" Value="Transparent" />
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding HoverButtonHex, Converter={x:Static convertors:HexStringToBrushConvertor.Instance}}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </controls:FastGrid.Resources>

            <Button
                Command="{Binding OpenGitHubSourceCommand}"
                Content="{materialDesign:PackIcon Kind=Github}"
                Foreground="{StaticResource ButtonIconColor}"
                Grid.Column="0" />
            <Button
                Content="{materialDesign:PackIcon Kind=Settings}"
                Foreground="{StaticResource ButtonIconColor}"
                Grid.Column="1" />
        </controls:FastGrid>

    </controls:FastGrid>


</Window>
